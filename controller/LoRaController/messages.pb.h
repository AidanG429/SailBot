/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.0-dev */

#ifndef PB_MESSAGES_PB_H_INCLUDED
#define PB_MESSAGES_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _Mode {
    int32_t mode;
/* @@protoc_insertion_point(struct:Mode) */
} Mode;


typedef struct _SkipperCommand {
    int32_t sailPosition;
    int32_t rudderPosition;
/* @@protoc_insertion_point(struct:SkipperCommand) */
} SkipperCommand;


/* Initializer values for message structs */
#define SkipperCommand_init_default              {0, 0}
#define Mode_init_default                        {0}
#define SkipperCommand_init_zero                 {0, 0}
#define Mode_init_zero                           {0}

/* Field tags (for use in manual encoding/decoding) */
#define Mode_mode_tag                            1
#define SkipperCommand_sailPosition_tag          1
#define SkipperCommand_rudderPosition_tag        2

/* Struct field encoding specification for nanopb */
#define SkipperCommand_FIELDLIST(X, a) \
X(a, STATIC, SINGULAR, INT32, sailPosition, 1) \
X(a, STATIC, SINGULAR, SINT32, rudderPosition, 2)
#define SkipperCommand_CALLBACK NULL
#define SkipperCommand_DEFAULT NULL

#define Mode_FIELDLIST(X, a) \
X(a, STATIC, SINGULAR, INT32, mode, 1)
#define Mode_CALLBACK NULL
#define Mode_DEFAULT NULL

extern const pb_msgdesc_t SkipperCommand_msg;
extern const pb_msgdesc_t Mode_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define SkipperCommand_fields &SkipperCommand_msg
#define Mode_fields &Mode_msg

/* Maximum encoded size of messages (where known) */
#define SkipperCommand_size                      17
#define Mode_size                                11

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
